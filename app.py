{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d450396c-23e2-4be2-b975-075ec8040f8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-07 01:18:01.546 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run D:\\Anaconda BDA\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 22\u001b[0m\n\u001b[0;32m     20\u001b[0m st\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mScatter Plot of Quantity vs. Value\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     21\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m8\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[1;32m---> 22\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mQuantity\u001b[39m\u001b[38;5;124m'\u001b[39m], df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValue\u001b[39m\u001b[38;5;124m'\u001b[39m], color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.5\u001b[39m)\n\u001b[0;32m     23\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mScatter Plot of Quantity vs. Value\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     24\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mQuantity\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Sidebar for navigation\n",
    "st.sidebar.title(\"Navigation\")\n",
    "option = st.sidebar.selectbox(\"Select a Chart\", \n",
    "                              [\"Scatter Plot: Quantity vs. Value\", \n",
    "                               \"Line Plot: Quantity Over Time\", \n",
    "                               \"Bar Chart: Top 10 Countries by Trade Quantity & Value\", \n",
    "                               \"Scatter Plot: Trade Value vs. Quantity by Shipping Method\", \n",
    "                               \"Box-Whisker Plot of Quantity by Import/Export\", \n",
    "                               \"Pie Chart: Trade Categories\", \n",
    "                               \"Histogram of Trade Values\",\n",
    "                               \"Pie Chart: Import vs Export\"])\n",
    "\n",
    "# Scatter Plot: Quantity vs Value\n",
    "if option == \"Scatter Plot: Quantity vs. Value\":\n",
    "    st.title(\"Scatter Plot of Quantity vs. Value\")\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.scatter(df['Quantity'], df['Value'], color='blue', alpha=0.5)\n",
    "    plt.title('Scatter Plot of Quantity vs. Value')\n",
    "    plt.xlabel('Quantity')\n",
    "    plt.ylabel('Value')\n",
    "    plt.grid(True)\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Line Plot: Quantity Over Time\n",
    "if option == \"Line Plot: Quantity Over Time\":\n",
    "    st.title('Line Plot of Quantity Over Time')\n",
    "    \n",
    "    # Adjust the 'Date' column if necessary\n",
    "    if 'Date' not in df.columns and 'Date' in df.index.names:\n",
    "        df.reset_index(inplace=True)\n",
    "\n",
    "    # Rename date column if needed\n",
    "    if 'Date' not in df.columns:\n",
    "        for col in df.columns:\n",
    "            if 'date' in col.lower():\n",
    "                df.rename(columns={col: 'Date'}, inplace=True)\n",
    "    \n",
    "    if 'Date' in df.columns:\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(df['Date'], df['Quantity'], color='green', linestyle='-', marker='o')\n",
    "        plt.title('Line Plot of Quantity Over Time')\n",
    "        plt.xlabel('Date')\n",
    "        plt.ylabel('Quantity')\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.grid(True)\n",
    "        st.pyplot(plt)\n",
    "\n",
    "# Bar Chart: Top 10 Countries by Trade Quantity & Value\n",
    "if option == \"Bar Chart: Top 10 Countries by Trade Quantity & Value\":\n",
    "    st.title(\"Top 10 Countries by Trade Quantity and Value\")\n",
    "    top_countries = df.groupby('Country').agg({\n",
    "        'Quantity': 'sum',\n",
    "        'Value': 'sum'\n",
    "    }).sort_values(by='Value', ascending=False).head(10)\n",
    "\n",
    "    # Bar Chart for Quantity\n",
    "    st.subheader(\"Top 10 Countries by Trade Quantity\")\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    top_countries['Quantity'].plot(kind='bar', color='skyblue')\n",
    "    plt.title('Top 10 Countries by Trade Quantity')\n",
    "    plt.xlabel('Country')\n",
    "    plt.ylabel('Total Trade Quantity')\n",
    "    plt.xticks(rotation=45)\n",
    "    st.pyplot(plt)\n",
    "\n",
    "    # Bar Chart for Value\n",
    "    st.subheader(\"Top 10 Countries by Trade Value\")\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    top_countries['Value'].plot(kind='bar', color='lightgreen')\n",
    "    plt.title('Top 10 Countries by Trade Value')\n",
    "    plt.xlabel('Country')\n",
    "    plt.ylabel('Total Trade Value')\n",
    "    plt.xticks(rotation=45)\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Scatter Plot: Trade Value vs. Quantity by Shipping Method\n",
    "if option == \"Scatter Plot: Trade Value vs. Quantity by Shipping Method\":\n",
    "    st.title(\"Trade Value vs. Quantity by Shipping Method\")\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    shipping_methods = df['Shipping_Method'].unique()\n",
    "\n",
    "    for method in shipping_methods:\n",
    "        subset = df[df['Shipping_Method'] == method]\n",
    "        plt.scatter(subset['Quantity'], subset['Value'], label=method, alpha=0.6)\n",
    "\n",
    "    plt.title('Trade Value vs. Quantity by Shipping Method')\n",
    "    plt.xlabel('Trade Quantity')\n",
    "    plt.ylabel('Trade Value')\n",
    "    plt.legend(title=\"Shipping Method\")\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Box-Whisker Plot of Quantity by Import/Export\n",
    "if option == \"Box-Whisker Plot of Quantity by Import/Export\":\n",
    "    st.title(\"Box-Whisker Plot of Quantity by Import/Export\")\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.boxplot(x='Import_Export', y='Quantity', data=df)\n",
    "    plt.title('Box-Whisker Plot of Quantity by Import/Export')\n",
    "    plt.xlabel('Import/Export')\n",
    "    plt.ylabel('Quantity')\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Pie Chart: Trade Categories by Value\n",
    "if option == \"Pie Chart: Trade Categories\":\n",
    "    st.title(\"Pie Chart of Trade Categories by Value\")\n",
    "    product_categories = df.groupby('Category').agg({\n",
    "        'Value': 'sum'\n",
    "    }).sort_values(by='Value', ascending=False)\n",
    "    \n",
    "    plt.figure(figsize=(8, 8))\n",
    "    plt.pie(product_categories['Value'], labels=product_categories.index, autopct='%1.1f%%', startangle=140)\n",
    "    plt.title('Distribution of Trade Value by Product Category')\n",
    "    plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Histogram of Trade Values\n",
    "if option == \"Histogram of Trade Values\":\n",
    "    st.title(\"Histogram of Trade Values\")\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.histplot(data=df, x='Value', bins=30, kde=True)\n",
    "    plt.title('Distribution of Values')\n",
    "    st.pyplot(plt)\n",
    "\n",
    "# Pie Chart: Import vs Export\n",
    "if option == \"Pie Chart: Import vs Export\":\n",
    "    st.title(\"Pie Chart: Import vs Export Proportions\")\n",
    "    import_export_counts = df['Import_Export'].value_counts()\n",
    "    \n",
    "    plt.figure(figsize=(7, 7))\n",
    "    plt.pie(import_export_counts, labels=import_export_counts.index, autopct='%1.1f%%', startangle=90, colors=['lightblue', 'lightgreen'])\n",
    "    plt.title('Proportion of Import vs Export')\n",
    "    st.pyplot(plt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9c40de8-21a4-4ee7-ba77-4e512c126655",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
